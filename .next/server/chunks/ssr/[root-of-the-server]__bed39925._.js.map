{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport Database from 'better-sqlite3';\n\n// Define interfaces for our data structures\ninterface User {\n    name: string;\n    phone: string;\n    email: string;\n    messName: string;\n}\n\ninterface Student extends User {\n    messRegistrationNo: string;\n}\n\ninterface Manager extends User {\n    messRegistrationNo: string;\n}\n\ninterface Owner extends User {\n    ownerId: string;\n    messRegistrationNo: string;\n}\n\n// --- SQLite Database Setup ---\n// In a serverless environment or during development with hot-reloading,\n// it's crucial to avoid creating new database connections on every request.\n// A common pattern is to store the connection on the global object.\ninterface GlobalWithDb {\n  db: Database.Database;\n}\nconst globalWithDb = global as unknown as GlobalWithDb;\n\nlet db: Database.Database;\n\nif (process.env.NODE_ENV === 'production') {\n  db = new Database('messmate.db');\n} else {\n  if (!globalWithDb.db) {\n    globalWithDb.db = new Database('messmate.db');\n  }\n  db = globalWithDb.db;\n}\n\n\n// --- Create Tables if they don't exist ---\nconst createStudentTable = db.prepare(`\n  CREATE TABLE IF NOT EXISTS students (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    phone TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE,\n    messName TEXT NOT NULL,\n    messRegistrationNo TEXT NOT NULL\n  )\n`);\n\nconst createManagerTable = db.prepare(`\n  CREATE TABLE IF NOT EXISTS managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    phone TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE,\n    messName TEXT NOT NULL,\n    messRegistrationNo TEXT NOT NULL\n  )\n`);\n\nconst createOwnerTable = db.prepare(`\n  CREATE TABLE IF NOT EXISTS owners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    phone TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE,\n    messName TEXT NOT NULL,\n    ownerId TEXT NOT NULL UNIQUE,\n    messRegistrationNo TEXT NOT NULL UNIQUE\n  )\n`);\n\n// Run table creation queries\ndb.transaction(() => {\n  createStudentTable.run();\n  createManagerTable.run();\n  createOwnerTable.run();\n})();\n\n// --- \"Database\" insertion functions ---\nexport function addStudent(student: Student) {\n    const stmt = db.prepare(\n        'INSERT INTO students (name, phone, email, messName, messRegistrationNo) VALUES (?, ?, ?, ?, ?)'\n    );\n    stmt.run(student.name, student.phone, student.email, student.messName, student.messRegistrationNo);\n}\n\nexport function addManager(manager: Manager) {\n    const stmt = db.prepare(\n        'INSERT INTO managers (name, phone, email, messName, messRegistrationNo) VALUES (?, ?, ?, ?, ?)'\n    );\n    stmt.run(manager.name, manager.phone, manager.email, manager.messName, manager.messRegistrationNo);\n}\n\nexport function addOwner(owner: Owner) {\n    const stmt = db.prepare(\n        'INSERT INTO owners (name, phone, email, messName, ownerId, messRegistrationNo) VALUES (?, ?, ?, ?, ?, ?)'\n    );\n    stmt.run(owner.name, owner.phone, owner.email, owner.messName, owner.ownerId, owner.messRegistrationNo);\n}\n\n// --- \"Database\" query functions ---\nexport function findStudentByEmail(email: string): Student | undefined {\n    const stmt = db.prepare('SELECT * FROM students WHERE lower(email) = lower(?)');\n    const student = stmt.get(email) as Student | undefined;\n    return student;\n}\n\nexport function findManagerByEmail(email: string): Manager | undefined {\n    const stmt = db.prepare('SELECT * FROM managers WHERE lower(email) = lower(?)');\n    const manager = stmt.get(email) as Manager | undefined;\n    return manager;\n}\n\nexport function findOwnerByEmail(email: string): Owner | undefined {\n    const stmt = db.prepare('SELECT * FROM owners WHERE lower(email) = lower(?)');\n    const owner = stmt.get(email) as Owner | undefined;\n    return owner;\n}\n\nexport function findOwnerById(ownerId: string): Owner | undefined {\n    const stmt = db.prepare('SELECT * FROM owners WHERE lower(ownerId) = lower(?)');\n    const owner = stmt.get(ownerId) as Owner | undefined;\n    return owner;\n}\n\n/**\n * Checks if a mess registration number is valid (i.e., exists in the owners table).\n * @param messRegistrationNo The mess registration number to check.\n * @returns true if the registration number is valid, otherwise false.\n */\nexport function isMessRegistrationNoValid(messRegistrationNo: string): boolean {\n    const stmt = db.prepare('SELECT messRegistrationNo FROM owners WHERE lower(messRegistrationNo) = lower(?)');\n    const owner = stmt.get(messRegistrationNo);\n    return !!owner;\n}\n\n/**\n * Checks if an email is already used by any user type.\n * @param email The email to check.\n * @param rolesToExclude An array of roles to exclude from the check.\n * @returns The role name if the email is in use, otherwise null.\n */\nexport function isEmailInUse(email: string, rolesToExclude: ('student' | 'manager' | 'owner')[] = []): string | null {\n    if (!rolesToExclude.includes('student')) {\n        const studentStmt = db.prepare('SELECT email FROM students WHERE lower(email) = lower(?)');\n        if (studentStmt.get(email)) return 'student';\n    }\n    if (!rolesToExclude.includes('manager')) {\n        const managerStmt = db.prepare('SELECT email FROM managers WHERE lower(email) = lower(?)');\n        if (managerStmt.get(email)) return 'manager';\n    }\n    if (!rolesToExclude.includes('owner')) {\n        const ownerStmt = db.prepare('SELECT email FROM owners WHERE lower(email) = lower(?)');\n        if (ownerStmt.get(email)) return 'owner';\n    }\n    return null;\n}\n\n\n/**\n * FOR DEVELOPMENT ONLY\n * Fetches all records from all tables.\n * @returns An object containing all students, managers, and owners.\n */\nexport function getAllTables() {\n    const students = db.prepare('SELECT * FROM students').all();\n    const managers = db.prepare('SELECT * FROM managers').all();\n    const owners = db.prepare('SELECT * FROM owners').all();\n    return { students, managers, owners };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AACA;;AA8BA,MAAM,eAAe;AAErB,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,aAAa,EAAE,EAAE;QACpB,aAAa,EAAE,GAAG,IAAI,2HAAA,CAAA,UAAQ,CAAC;IACjC;IACA,KAAK,aAAa,EAAE;AACtB;AAGA,4CAA4C;AAC5C,MAAM,qBAAqB,GAAG,OAAO,CAAC,CAAC;;;;;;;;;AASvC,CAAC;AAED,MAAM,qBAAqB,GAAG,OAAO,CAAC,CAAC;;;;;;;;;AASvC,CAAC;AAED,MAAM,mBAAmB,GAAG,OAAO,CAAC,CAAC;;;;;;;;;;AAUrC,CAAC;AAED,6BAA6B;AAC7B,GAAG,WAAW,CAAC;IACb,mBAAmB,GAAG;IACtB,mBAAmB,GAAG;IACtB,iBAAiB,GAAG;AACtB;AAGO,SAAS,WAAW,OAAgB;IACvC,MAAM,OAAO,GAAG,OAAO,CACnB;IAEJ,KAAK,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,KAAK,EAAE,QAAQ,KAAK,EAAE,QAAQ,QAAQ,EAAE,QAAQ,kBAAkB;AACrG;AAEO,SAAS,WAAW,OAAgB;IACvC,MAAM,OAAO,GAAG,OAAO,CACnB;IAEJ,KAAK,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,KAAK,EAAE,QAAQ,KAAK,EAAE,QAAQ,QAAQ,EAAE,QAAQ,kBAAkB;AACrG;AAEO,SAAS,SAAS,KAAY;IACjC,MAAM,OAAO,GAAG,OAAO,CACnB;IAEJ,KAAK,GAAG,CAAC,MAAM,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,KAAK,EAAE,MAAM,QAAQ,EAAE,MAAM,OAAO,EAAE,MAAM,kBAAkB;AAC1G;AAGO,SAAS,mBAAmB,KAAa;IAC5C,MAAM,OAAO,GAAG,OAAO,CAAC;IACxB,MAAM,UAAU,KAAK,GAAG,CAAC;IACzB,OAAO;AACX;AAEO,SAAS,mBAAmB,KAAa;IAC5C,MAAM,OAAO,GAAG,OAAO,CAAC;IACxB,MAAM,UAAU,KAAK,GAAG,CAAC;IACzB,OAAO;AACX;AAEO,SAAS,iBAAiB,KAAa;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC;IACxB,MAAM,QAAQ,KAAK,GAAG,CAAC;IACvB,OAAO;AACX;AAEO,SAAS,cAAc,OAAe;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC;IACxB,MAAM,QAAQ,KAAK,GAAG,CAAC;IACvB,OAAO;AACX;AAOO,SAAS,0BAA0B,kBAA0B;IAChE,MAAM,OAAO,GAAG,OAAO,CAAC;IACxB,MAAM,QAAQ,KAAK,GAAG,CAAC;IACvB,OAAO,CAAC,CAAC;AACb;AAQO,SAAS,aAAa,KAAa,EAAE,iBAAsD,EAAE;IAChG,IAAI,CAAC,eAAe,QAAQ,CAAC,YAAY;QACrC,MAAM,cAAc,GAAG,OAAO,CAAC;QAC/B,IAAI,YAAY,GAAG,CAAC,QAAQ,OAAO;IACvC;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,YAAY;QACrC,MAAM,cAAc,GAAG,OAAO,CAAC;QAC/B,IAAI,YAAY,GAAG,CAAC,QAAQ,OAAO;IACvC;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,UAAU;QACnC,MAAM,YAAY,GAAG,OAAO,CAAC;QAC7B,IAAI,UAAU,GAAG,CAAC,QAAQ,OAAO;IACrC;IACA,OAAO;AACX;AAQO,SAAS;IACZ,MAAM,WAAW,GAAG,OAAO,CAAC,0BAA0B,GAAG;IACzD,MAAM,WAAW,GAAG,OAAO,CAAC,0BAA0B,GAAG;IACzD,MAAM,SAAS,GAAG,OAAO,CAAC,wBAAwB,GAAG;IACrD,OAAO;QAAE;QAAU;QAAU;IAAO;AACxC","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/dev-actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getAllTables } from '@/lib/db';\n\nexport async function getDatabaseTables() {\n  try {\n    const data = getAllTables();\n    return { success: true, data };\n  } catch (error) {\n    console.error(\"Error fetching database tables:\", error);\n    if (error instanceof Error) {\n        return { success: false, error: error.message };\n    }\n    return { success: false, error: 'An unknown error occurred while fetching database data.' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,gHAAA,CAAA,eAAY,AAAD;QACxB,OAAO;YAAE,SAAS;YAAM;QAAK;IAC/B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,IAAI,iBAAiB,OAAO;YACxB,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAClD;QACA,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0D;IAC5F;AACF;;;IAXsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getDatabaseTables as '006052b7f4984169ee45694017b62efe80d5a03efd'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}