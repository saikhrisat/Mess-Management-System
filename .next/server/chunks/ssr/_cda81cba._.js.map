{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\n// NOTE: This is a mock in-memory database for prototyping purposes.\n// In a real application, you would use a persistent database like PostgreSQL or SQLite.\n\ninterface User {\n    name: string;\n    phone: string;\n    email: string;\n    messName: string;\n}\n\ninterface Student extends User {\n    messRegistrationNo: string;\n}\n\ninterface Manager extends User {\n    messRegistrationNo: string;\n}\n\ninterface Owner extends User {\n    ownerId: string;\n    messRegistrationNo: string;\n}\n\n// --- In-memory data store setup for development ---\n// In a stateless server environment, top-level variables are reset on each request.\n// To persist our mock \"database\" across requests in development, we attach it to the global object.\n// This is not suitable for production.\ninterface GlobalWithDb {\n  students: Student[];\n  managers: Manager[];\n  owners: Owner[];\n}\n\nconst globalWithDb = global as unknown as GlobalWithDb;\n\nif (!globalWithDb.students) globalWithDb.students = [];\nif (!globalWithDb.managers) globalWithDb.managers = [];\nif (!globalWithDb.owners) globalWithDb.owners = [];\n\nconst students: Student[] = globalWithDb.students;\nconst managers: Manager[] = globalWithDb.managers;\nconst owners: Owner[] = globalWithDb.owners;\n\n\n// --- \"Database\" insertion functions ---\nexport function addStudent(student: Student) {\n    // Prevent duplicates during development hot-reloads\n    if (!findStudentByEmail(student.email)) {\n        students.push(student);\n    }\n}\n\nexport function addManager(manager: Manager) {\n    if (!findManagerByEmail(manager.email)) {\n        managers.push(manager);\n    }\n}\n\nexport function addOwner(owner: Owner) {\n    if (!findOwnerByEmail(owner.email)) {\n        owners.push(owner);\n    }\n}\n\n// --- \"Database\" query functions ---\nexport function findStudentByEmail(email: string): Student | undefined {\n    return students.find(s => s.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findManagerByEmail(email: string): Manager | undefined {\n    return managers.find(m => m.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findOwnerByEmail(email: string): Owner | undefined {\n    return owners.find(o => o.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findOwnerById(ownerId: string): Owner | undefined {\n    return owners.find(o => o.ownerId.toLowerCase() === ownerId.toLowerCase());\n}\n\n\n/**\n * Checks if an email is already used by any user type.\n * @param email The email to check.\n * @param rolesToExclude An array of roles to exclude from the check.\n * @returns The role name if the email is in use, otherwise null.\n */\nexport function isEmailInUse(email: string, rolesToExclude: ('student' | 'manager' | 'owner')[] = []): string | null {\n    if (!rolesToExclude.includes('student') && findStudentByEmail(email)) {\n        return 'student';\n    }\n    if (!rolesToExclude.includes('manager') && findManagerByEmail(email)) {\n        return 'manager';\n    }\n    if (!rolesToExclude.includes('owner') && findOwnerByEmail(email)) {\n        return 'owner';\n    }\n    return null;\n}\n"],"names":[],"mappings":"AACA,oEAAoE;AACpE,wFAAwF;;;;;;;;;;;AAgCxF,MAAM,eAAe;AAErB,IAAI,CAAC,aAAa,QAAQ,EAAE,aAAa,QAAQ,GAAG,EAAE;AACtD,IAAI,CAAC,aAAa,QAAQ,EAAE,aAAa,QAAQ,GAAG,EAAE;AACtD,IAAI,CAAC,aAAa,MAAM,EAAE,aAAa,MAAM,GAAG,EAAE;AAElD,MAAM,WAAsB,aAAa,QAAQ;AACjD,MAAM,WAAsB,aAAa,QAAQ;AACjD,MAAM,SAAkB,aAAa,MAAM;AAIpC,SAAS,WAAW,OAAgB;IACvC,oDAAoD;IACpD,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG;QACpC,SAAS,IAAI,CAAC;IAClB;AACJ;AAEO,SAAS,WAAW,OAAgB;IACvC,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG;QACpC,SAAS,IAAI,CAAC;IAClB;AACJ;AAEO,SAAS,SAAS,KAAY;IACjC,IAAI,CAAC,iBAAiB,MAAM,KAAK,GAAG;QAChC,OAAO,IAAI,CAAC;IAChB;AACJ;AAGO,SAAS,mBAAmB,KAAa;IAC5C,OAAO,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACzE;AAEO,SAAS,mBAAmB,KAAa;IAC5C,OAAO,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACzE;AAEO,SAAS,iBAAiB,KAAa;IAC1C,OAAO,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACvE;AAEO,SAAS,cAAc,OAAe;IACzC,OAAO,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,CAAC,WAAW,OAAO,QAAQ,WAAW;AAC3E;AASO,SAAS,aAAa,KAAa,EAAE,iBAAsD,EAAE;IAChG,IAAI,CAAC,eAAe,QAAQ,CAAC,cAAc,mBAAmB,QAAQ;QAClE,OAAO;IACX;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,cAAc,mBAAmB,QAAQ;QAClE,OAAO;IACX;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,YAAY,iBAAiB,QAAQ;QAC9D,OAAO;IACX;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/actions.ts"],"sourcesContent":["\n'use server';\n\nimport * as z from 'zod';\nimport { addStudent, addManager, addOwner, isEmailInUse } from '@/lib/db';\n\nconst baseSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  phone: z.string().min(10, { message: 'Please enter a valid phone number.' }),\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  messName: z.string().min(2, { message: 'Mess name must be at least 2 characters.' }),\n});\n\nconst studentSchema = baseSchema.extend({\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst managerSchema = baseSchema.extend({\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst ownerSchema = baseSchema;\n\nexport async function registerStudent(data: z.infer<typeof studentSchema>) {\n  const validatedFields = studentSchema.safeParse(data);\n\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid fields. Please check your input.' };\n  }\n  \n  if (isEmailInUse(validatedFields.data.email)) {\n    return { success: false, error: 'This email is already registered.' };\n  }\n\n  addStudent(validatedFields.data);\n  console.log('Registering Student:', validatedFields.data);\n\n  return { success: true, message: 'Student registered successfully! Please login.' };\n}\n\nexport async function registerManager(data: z.infer<typeof managerSchema>) {\n    const validatedFields = managerSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n      return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    if (isEmailInUse(validatedFields.data.email)) {\n      return { success: false, error: 'This email is already registered.' };\n    }\n\n    addManager(validatedFields.data);\n    console.log('Registering Manager:', validatedFields.data);\n\n    return { success: true, message: 'Manager registered successfully! Please login.' };\n}\n\n\nexport async function registerOwner(data: z.infer<typeof ownerSchema>) {\n    const validatedFields = ownerSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n      return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    if (isEmailInUse(validatedFields.data.email)) {\n      return { success: false, error: 'This email is already registered.' };\n    }\n\n    const { name, messName } = validatedFields.data;\n    const ownerId = `${name.split(' ')[0].toUpperCase()}-00001`;\n    const messRegistrationNo = `${messName.replace(/\\s+/g, '').toUpperCase()}-00001`;\n\n    const ownerData = {\n        ...validatedFields.data,\n        ownerId,\n        messRegistrationNo,\n    };\n    \n    addOwner(ownerData);\n    console.log('Registering Owner:', ownerData);\n\n    return {\n      success: true,\n      message: 'Owner account created! Please save these credentials.',\n      data: {\n        ownerId,\n        messRegistrationNo,\n      },\n    };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/register/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {registerStudent as '40c10d5a841429eaa2720044f0f10e936f524759d1'} from 'ACTIONS_MODULE0'\nexport {registerManager as '402f0c94de6ad324ed33a3c6e09141f20c6d95973a'} from 'ACTIONS_MODULE0'\nexport {registerOwner as '40441ac4543654b04383aa576e498c4fb226837bac'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/register/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/register/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/register/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/register/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}