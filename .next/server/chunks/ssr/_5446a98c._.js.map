{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/actions.ts"],"sourcesContent":["\n'use server';\n\nimport * as z from 'zod';\n\n// NOTE: In a real application, you would use a database (e.g., SQLite, PostgreSQL)\n// to store user information, ensure email uniqueness, and securely hash passwords.\n// The following implementation simulates registration behavior for prototyping purposes\n// and does not include password hashing or database interactions.\n\nconst baseSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  phone: z.string().min(10, { message: 'Please enter a valid phone number.' }),\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  messName: z.string().min(2, { message: 'Mess name must be at least 2 characters.' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters.' }),\n});\n\nconst studentSchema = baseSchema.extend({\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst managerSchema = baseSchema.extend({\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst ownerSchema = baseSchema;\n\nexport async function registerStudent(data: z.infer<typeof studentSchema>) {\n  const validatedFields = studentSchema.safeParse(data);\n\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid fields. Please check your input.' };\n  }\n\n  // TODO: Add database logic here to create a new student record.\n  console.log('Registering Student:', validatedFields.data);\n\n  return { success: true, message: 'Student registered successfully! Please login.' };\n}\n\nexport async function registerManager(data: z.infer<typeof managerSchema>) {\n    const validatedFields = managerSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n      return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    // TODO: Add database logic here to create a new manager record.\n    console.log('Registering Manager:', validatedFields.data);\n\n    return { success: true, message: 'Manager registered successfully! Please login.' };\n}\n\n\nexport async function registerOwner(data: z.infer<typeof ownerSchema>) {\n    const validatedFields = ownerSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n      return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    const { name, messName } = validatedFields.data;\n\n    // In a real app, query the DB for the last ID to ensure uniqueness and increment it.\n    // For this prototype, we'll generate a static ID.\n    const ownerId = `${name.split(' ')[0].toUpperCase()}-00001`;\n    const messRegistrationNo = `${messName.replace(/\\s+/g, '').toUpperCase()}-00001`;\n\n    // TODO: Add database logic here to create a new owner record with the generated IDs.\n    console.log('Registering Owner:', { ...validatedFields.data, ownerId, messRegistrationNo });\n\n    return {\n      success: true,\n      message: 'Owner account created! Please save these credentials.',\n      data: {\n        ownerId,\n        messRegistrationNo,\n      },\n    };\n}\n"],"names":[],"mappings":";;;;;;;AAGA;;;;;AAEA,mFAAmF;AACnF,mFAAmF;AACnF,wFAAwF;AACxF,kEAAkE;AAElE,MAAM,aAAa,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,EAAE;IAC1B,MAAM,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsC;IACzE,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,IAAI;QAAE,SAAS;IAAqC;IAC1E,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,KAAK,CAAC;QAAE,SAAS;IAA8B;IACjE,UAAU,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2C;IAClF,UAAU,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAA0C;AACnF;AAEA,MAAM,gBAAgB,WAAW,MAAM,CAAC;IACtC,oBAAoB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAAwC;AAC3F;AAEA,MAAM,gBAAgB,WAAW,MAAM,CAAC;IACtC,oBAAoB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAAwC;AAC3F;AAEA,MAAM,cAAc;AAEb,eAAe,gBAAgB,IAAmC;IACvE,MAAM,kBAAkB,cAAc,SAAS,CAAC;IAEhD,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2C;IAC7E;IAEA,gEAAgE;IAChE,QAAQ,GAAG,CAAC,wBAAwB,gBAAgB,IAAI;IAExD,OAAO;QAAE,SAAS;QAAM,SAAS;IAAiD;AACpF;AAEO,eAAe,gBAAgB,IAAmC;IACrE,MAAM,kBAAkB,cAAc,SAAS,CAAC;IAEhD,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2C;IAC7E;IAEA,gEAAgE;IAChE,QAAQ,GAAG,CAAC,wBAAwB,gBAAgB,IAAI;IAExD,OAAO;QAAE,SAAS;QAAM,SAAS;IAAiD;AACtF;AAGO,eAAe,cAAc,IAAiC;IACjE,MAAM,kBAAkB,YAAY,SAAS,CAAC;IAE9C,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2C;IAC7E;IAEA,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAgB,IAAI;IAE/C,qFAAqF;IACrF,kDAAkD;IAClD,MAAM,UAAU,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,MAAM,CAAC;IAC3D,MAAM,qBAAqB,GAAG,SAAS,OAAO,CAAC,QAAQ,IAAI,WAAW,GAAG,MAAM,CAAC;IAEhF,qFAAqF;IACrF,QAAQ,GAAG,CAAC,sBAAsB;QAAE,GAAG,gBAAgB,IAAI;QAAE;QAAS;IAAmB;IAEzF,OAAO;QACL,SAAS;QACT,SAAS;QACT,MAAM;YACJ;YACA;QACF;IACF;AACJ;;;IApDsB;IAaA;IAcA;;AA3BA,+OAAA;AAaA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/register/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {registerStudent as '40c10d5a841429eaa2720044f0f10e936f524759d1'} from 'ACTIONS_MODULE0'\nexport {registerManager as '402f0c94de6ad324ed33a3c6e09141f20c6d95973a'} from 'ACTIONS_MODULE0'\nexport {registerOwner as '40441ac4543654b04383aa576e498c4fb226837bac'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/register/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/register/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/register/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/register/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/register/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}