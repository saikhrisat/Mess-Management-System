{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\n// NOTE: This is a mock in-memory database for prototyping purposes.\n// In a real application, you would use a persistent database like PostgreSQL or SQLite.\n\ninterface User {\n    name: string;\n    phone: string;\n    email: string;\n    messName: string;\n}\n\ninterface Student extends User {\n    messRegistrationNo: string;\n}\n\ninterface Manager extends User {\n    messRegistrationNo: string;\n}\n\ninterface Owner extends User {\n    ownerId: string;\n    messRegistrationNo: string;\n}\n\n// --- In-memory data store setup for development ---\n// In a stateless server environment, top-level variables are reset on each request.\n// To persist our mock \"database\" across requests in development, we attach it to the global object.\n// This is not suitable for production.\ninterface GlobalWithDb {\n  students: Student[];\n  managers: Manager[];\n  owners: Owner[];\n}\n\nconst globalWithDb = global as unknown as GlobalWithDb;\n\nif (!globalWithDb.students) globalWithDb.students = [];\nif (!globalWithDb.managers) globalWithDb.managers = [];\nif (!globalWithDb.owners) globalWithDb.owners = [];\n\nconst students: Student[] = globalWithDb.students;\nconst managers: Manager[] = globalWithDb.managers;\nconst owners: Owner[] = globalWithDb.owners;\n\n\n// --- \"Database\" insertion functions ---\nexport function addStudent(student: Student) {\n    // Prevent duplicates during development hot-reloads\n    if (!findStudentByEmail(student.email)) {\n        students.push(student);\n    }\n}\n\nexport function addManager(manager: Manager) {\n    if (!findManagerByEmail(manager.email)) {\n        managers.push(manager);\n    }\n}\n\nexport function addOwner(owner: Owner) {\n    if (!findOwnerByEmail(owner.email)) {\n        owners.push(owner);\n    }\n}\n\n// --- \"Database\" query functions ---\nexport function findStudentByEmail(email: string): Student | undefined {\n    return students.find(s => s.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findManagerByEmail(email: string): Manager | undefined {\n    return managers.find(m => m.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findOwnerByEmail(email: string): Owner | undefined {\n    return owners.find(o => o.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findOwnerById(ownerId: string): Owner | undefined {\n    return owners.find(o => o.ownerId.toLowerCase() === ownerId.toLowerCase());\n}\n\n\n/**\n * Checks if an email is already used by any user type.\n * @param email The email to check.\n * @param rolesToExclude An array of roles to exclude from the check.\n * @returns The role name if the email is in use, otherwise null.\n */\nexport function isEmailInUse(email: string, rolesToExclude: ('student' | 'manager' | 'owner')[] = []): string | null {\n    if (!rolesToExclude.includes('student') && findStudentByEmail(email)) {\n        return 'student';\n    }\n    if (!rolesToExclude.includes('manager') && findManagerByEmail(email)) {\n        return 'manager';\n    }\n    if (!rolesToExclude.includes('owner') && findOwnerByEmail(email)) {\n        return 'owner';\n    }\n    return null;\n}\n"],"names":[],"mappings":"AACA,oEAAoE;AACpE,wFAAwF;;;;;;;;;;;AAgCxF,MAAM,eAAe;AAErB,IAAI,CAAC,aAAa,QAAQ,EAAE,aAAa,QAAQ,GAAG,EAAE;AACtD,IAAI,CAAC,aAAa,QAAQ,EAAE,aAAa,QAAQ,GAAG,EAAE;AACtD,IAAI,CAAC,aAAa,MAAM,EAAE,aAAa,MAAM,GAAG,EAAE;AAElD,MAAM,WAAsB,aAAa,QAAQ;AACjD,MAAM,WAAsB,aAAa,QAAQ;AACjD,MAAM,SAAkB,aAAa,MAAM;AAIpC,SAAS,WAAW,OAAgB;IACvC,oDAAoD;IACpD,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG;QACpC,SAAS,IAAI,CAAC;IAClB;AACJ;AAEO,SAAS,WAAW,OAAgB;IACvC,IAAI,CAAC,mBAAmB,QAAQ,KAAK,GAAG;QACpC,SAAS,IAAI,CAAC;IAClB;AACJ;AAEO,SAAS,SAAS,KAAY;IACjC,IAAI,CAAC,iBAAiB,MAAM,KAAK,GAAG;QAChC,OAAO,IAAI,CAAC;IAChB;AACJ;AAGO,SAAS,mBAAmB,KAAa;IAC5C,OAAO,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACzE;AAEO,SAAS,mBAAmB,KAAa;IAC5C,OAAO,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACzE;AAEO,SAAS,iBAAiB,KAAa;IAC1C,OAAO,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW;AACvE;AAEO,SAAS,cAAc,OAAe;IACzC,OAAO,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,CAAC,WAAW,OAAO,QAAQ,WAAW;AAC3E;AASO,SAAS,aAAa,KAAa,EAAE,iBAAsD,EAAE;IAChG,IAAI,CAAC,eAAe,QAAQ,CAAC,cAAc,mBAAmB,QAAQ;QAClE,OAAO;IACX;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,cAAc,mBAAmB,QAAQ;QAClE,OAAO;IACX;IACA,IAAI,CAAC,eAAe,QAAQ,CAAC,YAAY,iBAAiB,QAAQ;QAC9D,OAAO;IACX;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/actions.ts"],"sourcesContent":["\n'use server';\n\nimport * as z from 'zod';\nimport { findStudentByEmail, findManagerByEmail, findOwnerById, isEmailInUse } from '@/lib/db';\n\nconst studentLoginSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst managerLoginSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nconst ownerLoginSchema = z.object({\n  ownerId: z.string().min(1, { message: 'Owner ID is required.' }),\n  messRegistrationNo: z.string().min(1, { message: 'Mess registration number is required.' }),\n});\n\nexport async function loginStudent(data: z.infer<typeof studentLoginSchema>) {\n    const validatedFields = studentLoginSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    const { email, messRegistrationNo } = validatedFields.data;\n    const student = findStudentByEmail(email);\n\n    if (!student) {\n        // To prevent leaking information about which role an email is registered with,\n        // we can give a generic error. Or a more specific one as requested.\n        const otherRole = isEmailInUse(email, ['manager', 'owner']);\n        if (otherRole) {\n            return { success: false, error: `This email is registered as a ${otherRole}. Please use the correct login tab.` };\n        }\n        return { success: false, error: 'Invalid credentials. Please check your email and registration number.' };\n    }\n\n    if (student.messRegistrationNo.toLowerCase() !== messRegistrationNo.toLowerCase()) {\n        return { success: false, error: 'Invalid credentials. Please check your email and registration number.' };\n    }\n\n    return { success: true, message: 'Login successful!' };\n}\n\nexport async function loginManager(data: z.infer<typeof managerLoginSchema>) {\n    const validatedFields = managerLoginSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    const { email, messRegistrationNo } = validatedFields.data;\n    const manager = findManagerByEmail(email);\n\n    if (!manager) {\n        const otherRole = isEmailInUse(email, ['student', 'owner']);\n        if (otherRole) {\n            return { success: false, error: `This email is registered as a ${otherRole}. Please use the correct login tab.` };\n        }\n        return { success: false, error: 'Invalid credentials. Please check your email and registration number.' };\n    }\n\n    if (manager.messRegistrationNo.toLowerCase() !== messRegistrationNo.toLowerCase()) {\n        return { success: false, error: 'Invalid credentials. Please check your email and registration number.' };\n    }\n\n    return { success: true, message: 'Login successful!' };\n}\n\nexport async function loginOwner(data: z.infer<typeof ownerLoginSchema>) {\n    const validatedFields = ownerLoginSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid fields. Please check your input.' };\n    }\n\n    const { ownerId, messRegistrationNo } = validatedFields.data;\n    const owner = findOwnerById(ownerId);\n\n    if (!owner || owner.messRegistrationNo.toLowerCase() !== messRegistrationNo.toLowerCase()) {\n        return { success: false, error: 'Invalid credentials. Please check your Owner ID and registration number.' };\n    }\n\n    return { success: true, message: 'Login successful!' };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {loginStudent as '402eb020bc0cb165d5c13de04a3ad81c87f85def39'} from 'ACTIONS_MODULE0'\nexport {loginManager as '402419d26883ce32e5b7f7711a76b4ea11dd51b4e6'} from 'ACTIONS_MODULE0'\nexport {loginOwner as '40501abfdc48b6a432a8d00315602317692bdd734e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}